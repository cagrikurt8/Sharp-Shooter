type: edu
files:
- name: src/shooter/SharpShooter.java
  visible: true
  text: |-
    package shooter;

    import javax.swing.*;

    public class SharpShooter extends JFrame {
        public SharpShooter() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: src/shooter/ApplicationRunner.java
  visible: true
  text: |
    package shooter;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new SharpShooter();
        }
    }
  learner_created: false
- name: test/SharpShooterTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JPanelFixture;
    import org.assertj.swing.image.ScreenshotTaker;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import shooter.SharpShooter;

    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.text.MessageFormat;

    import static java.awt.event.KeyEvent.*;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class SharpShooterTest extends SwingTest {

        private static final int TARGET_CIRCLE_STEP = 30;
        private static final int TARGET_CENTER = 350;
        private static final int SIGHT_RADIUS = 40;
        private static final int MOVE_STEP = 10;
        private final static int MAX_SHOOTING_ATTEMPTS = 12;

        public SharpShooterTest() {
          super(new SharpShooter());
        }

        @SwingComponent
        private JLabelFixture statusbar;

        @SwingComponent
        private JPanelFixture canvas;

        @DynamicTest(feedback = "At start the Statusbar should contain: " +
                                "Press the SPACE bar to start the game.")
        CheckResult test1() {

            // before the game start the sight should be immovable
            for (int i = 0; i < 10; i++) {
                canvas.pressKey(VK_LEFT);
            }

            assertEquals(true,
                statusbar.text().toLowerCase().contains("press the space bar to start the game"),
                "Check statusbar text before game start.");

            return correct();
        }

        @DynamicTest(feedback = "After start the Statusbar should contain: " +
                "Bullets left: " + MAX_SHOOTING_ATTEMPTS + ", your score: 0")
        CheckResult test2() {

            canvas.pressKey(VK_SPACE);

            assertEquals(false,
                    statusbar.text().toLowerCase().contains("press the space bar to start the game."),
                    "Check statusbar text immediately after the game start.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("bullets left: " + MAX_SHOOTING_ATTEMPTS),
                    "Wrong calculation of the attempts number.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("your score: 0"),
                    "Wrong calculation of the score.");

            return correct();
        }

        private final String[][] SCORE_DATA = {
            {"1",  "1", "0", "11", "10"},
            {"2",  "1", "4", "10", "19"},
            {"3",  "1", "3",  "9", "27"},
            {"4",  "1", "3",  "8", "34"},
            {"5",  "1", "3",  "7", "40"},
            {"6",  "1", "3",  "6", "45"},
            {"7",  "1", "3",  "5", "49"},
            {"8",  "1", "3",  "4", "52"},
            {"9",  "1", "3",  "3", "54"},
            {"10", "1", "3",  "2", "55"},
            {"11", "1", "3",  "1", "55"}
        };

        @DynamicTest(data = "SCORE_DATA", feedback = "Wrong calculation of the attempts number or score.")
        CheckResult test3(final String number, final String spacePress, final String upPress,
                          final String attempts, final String score) {

            for (int i = 0; i < Integer.parseInt(upPress); i++) {
                canvas.pressKey(VK_UP);
            }

            for (int i = 0; i < Integer.parseInt(spacePress); i++) {
                canvas.pressKey(VK_SPACE);
            }

            assertEquals(true,
                statusbar.text().toLowerCase().contains("bullets left: " + attempts),
            "Wrong calculation of the attempts number. " +
                 "After {0} shoot it should be: {1}.", number, attempts);

            assertEquals(true,
                statusbar.text().toLowerCase().contains("your score: " + score),
            "Wrong calculation of the score. " +
                 "After {0} shoot it should be: {1}.", number, attempts);

            return correct();
        }

        @DynamicTest(feedback = "After 12nd shooting the game should be over.")
        CheckResult test4() {

            canvas.pressKey(VK_SPACE);

            assertEquals(false,
                    statusbar.text().toLowerCase().contains("bullets left:"),
                    "Check statusbar text after the end of the game.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("game over"),
                    "Status bar should contain: Game over.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("your score: 55"),
                    "Status bar should contain: Your score: 55");

            return correct();
        }

        private final int[] BULLET_HOLES = new int[] {0, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31};

        @DynamicTest(data = "BULLET_HOLES", feedback = "After the end of the game the sight should have 11 bullet holes.")
        CheckResult test5(final int dy) {

            var screenshot = takeScreenshot();

            var x = TARGET_CENTER;
            var y = TARGET_CENTER - dy * MOVE_STEP;

            assertEquals(true,
                    checkBullet(screenshot, x, y),
                    "Expected a bullet hole at point ({0}, {1})", x, y);

            return correct();
        }


        @DynamicTest(feedback = "After the end of the game the sight should be immovable.")
        CheckResult test6() {
            for (int i = 0; i < 10; i++) {
                canvas.pressKey(VK_RIGHT);
            }
            canvas.pressKey(VK_SPACE);

            var screenshot = takeScreenshot();

            var x = TARGET_CENTER - 10 * MOVE_STEP;
            var y = 40;

            assertEquals(false,
                    checkBullet(screenshot, x, y),
                    "Not expected a bullet hole at point ({0}, {1})", x, y);

            return correct();
        }


        private BufferedImage takeScreenshot() {
            var screenshotTaker = new ScreenshotTaker();
            return screenshotTaker.takeScreenshotOf(canvas.target());
        }

        private boolean checkBullet(BufferedImage screenshot, int x, int y) {
            return Color.BLACK.getRGB() != screenshot.getRGB(x, y) &&
                    Color.WHITE.getRGB() != screenshot.getRGB(x, y) &&
                    Color.DARK_GRAY.getRGB() != screenshot.getRGB(x, y);
        }

        // TODO: The game graph

        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/shooter/BulletHole.java
  visible: true
  text: |
    package shooter;

    import java.awt.*;
    import java.awt.geom.Ellipse2D;
    import java.awt.image.BufferedImage;

    public class BulletHole {

        private static final int bulletRadius = 5;

        public static final BufferedImage IMAGE = createImage();

        private static BufferedImage createImage() {
            BufferedImage image = new BufferedImage(2*bulletRadius, 2*bulletRadius, BufferedImage.TYPE_INT_ARGB);

            Graphics2D g2 = image.createGraphics();
            Ellipse2D ellipse = new Ellipse2D.Double(0, 0, 2*bulletRadius, 2*bulletRadius);
            g2.setPaint(Color.CYAN);
            g2.fill(ellipse);
            g2.setPaint(Color.BLUE);
            g2.draw(ellipse);

            return image;
        }
    }
  learner_created: true
- name: src/shooter/Sight.java
  visible: true
  text: |
    package shooter;

    import java.awt.*;
    import java.awt.geom.Ellipse2D;
    import java.awt.geom.Line2D;
    import java.awt.image.BufferedImage;

    public class Sight {

        private static final int sightRadius = 40;
        private static final int sightInset = (int) (0.8 * sightRadius);
        public static final BufferedImage IMAGE = createImage();

        private static BufferedImage createImage() {
            BufferedImage image = new BufferedImage(2*sightRadius, 2*sightRadius, BufferedImage.TYPE_INT_ARGB);

            Graphics2D g2 = image.createGraphics();

            Ellipse2D ellipse = new Ellipse2D.Double(2, 2, 2*sightRadius - 4, 2*sightRadius - 4);
            g2.setPaint(Color.RED);
            g2.setStroke(new BasicStroke(5));
            g2.draw(ellipse);

            g2.setStroke(new BasicStroke(2));
            Line2D line = new Line2D.Double(0, sightRadius, sightInset, sightRadius);
            g2.draw(line);
            line = new Line2D.Double(2 * sightRadius - sightInset, sightRadius, 2 * sightRadius, sightRadius);
            g2.draw(line);
            line = new Line2D.Double(sightRadius, 0, sightRadius, sightInset);
            g2.draw(line);
            line = new Line2D.Double(sightRadius, 2 * sightRadius - sightInset, sightRadius, 2 * sightRadius);
            g2.draw(line);

            return image;
        }
    }
  learner_created: true
- name: src/shooter/Canvas.java
  visible: true
  text: |
    package shooter;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.KeyEvent;
    import java.awt.event.KeyListener;
    import java.util.HashMap;

    public class Canvas extends JPanel implements KeyListener {
        int sightX = 310;
        int sightY = 310;
        int holeX;
        int holeY;
        boolean spacePressed = false;
        HashMap<BulletHole, int[]> bulletHoleList = new HashMap<>();

        public Canvas() {
            setName("Canvas");
            setSize(700, 700);
            setVisible(true);
            setBackground(Color.DARK_GRAY);
            setFocusable(true);
            addKeyListener(this);
        }

        public void paint(Graphics g) {
            super.paint(g);
            g.drawImage(Target.IMAGE, 0, 0, null);
            g.drawImage(Sight.IMAGE, sightX, sightY, null);
            if (spacePressed) {
                for (BulletHole hole: bulletHoleList.keySet()) {
                    int x = bulletHoleList.get(hole)[0];
                    int y = bulletHoleList.get(hole)[1];
                    g.drawImage(hole.IMAGE, x, y, null);
                }
            }
            //g.drawImage(BulletHole.IMAGE, 660, 660, null);
            //g.drawImage(BulletHole.IMAGE, 40, 40, null);
        }

        @Override
        public void keyTyped(KeyEvent e) {

        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_UP) {
                if (-10 < sightY - 10) {
                    sightY -= 10;
                }
            } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                if (sightY + 10 < 630) {
                    sightY += 10;
                }
            } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                if (sightX + 10 < 630) {
                    sightX += 10;
                }
            } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                if (-10 < sightX - 10) {
                    sightX -= 10;
                }
            } else if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                spacePressed = true;
                holeX = sightX + 35;
                holeY = sightY + 35;
                bulletHoleList.put(new BulletHole(), new int[]{holeX, holeY});
            }
            repaint();
        }

        @Override
        public void keyReleased(KeyEvent e) {

        }
    }
  learner_created: true
- name: src/shooter/Target.java
  visible: true
  text: |
    package shooter;

    import java.awt.*;
    import java.awt.geom.Ellipse2D;
    import java.awt.image.BufferedImage;

    public class Target {

        private static final int imageWidth = 700;
        private static final int imageHeight = 700;
        private static final int radiusDiff = 30;

        public static final BufferedImage IMAGE = createImage();

        private static BufferedImage createImage() {
            BufferedImage image = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2 = image.createGraphics();
            Font font = new Font("SansSerif", Font.BOLD, 24);

            Rectangle rect = new Rectangle(0, 0, imageWidth, imageHeight);
            g2.setPaint(Color.DARK_GRAY);
            g2.fill(rect);

            for (int i = 10; i > 0; i--) {
                Ellipse2D ellipse = new Ellipse2D.Double(imageWidth/2 - i*radiusDiff, imageHeight/2 - i*radiusDiff, 2*i*radiusDiff, 2*i*radiusDiff);

                Color innerColor;
                Color borderColor;
                if (i == 4 || i == 3 || i == 2) {
                    innerColor = Color.WHITE;
                    borderColor = Color.BLACK;
                } else {
                    innerColor = Color.BLACK;
                    borderColor = Color.WHITE;
                }

                g2.setPaint(innerColor);
                g2.fill(ellipse);

                g2.setPaint(borderColor);
                g2.draw(ellipse);
            }
            return image;
        }
    }
  learner_created: true
- name: src/shooter/Controller.java
  visible: true
  text: |
    package shooter;

    import java.awt.event.KeyAdapter;
    import java.awt.event.KeyEvent;

    public class Controller extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_UP) {

            } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {

            } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {

            } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {

            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/17152#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 05 Dec 2021 12:47:03 UTC
record: 3
